name: CI/CD Pipeline (Optimized)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Skip heavy operations on PR builds
  SKIP_SECURITY_SCAN: ${{ github.event_name == 'pull_request' }}

jobs:
  quick-check:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Make Maven wrapper executable
        run: chmod +x ./mvnw

      - name: Debug environment
        run: |
          echo "=== Environment Debug ==="
          pwd
          ls -la
          echo "=== Java Version ==="
          java -version
          echo "=== Maven Version ==="
          mvn --version
          echo "=== Maven Wrapper Status ==="
          ls -la mvnw || echo "mvnw not found"
          echo "=== .mvn directory ==="
          ls -la .mvn/wrapper/ || echo ".mvn/wrapper not found"

      - name: Fast compile check (using Maven directly)
        run: mvn compile -T 1C

      - name: Static analysis (fast)
        run: mvn spotbugs:check -DskipTests || echo "Spotbugs issues found"
          
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Prevent hanging builds

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Make Maven wrapper executable
        run: chmod +x ./mvnw

      - name: Build application (skip tests for speed)
        run: mvn clean package -DskipTests

      - name: Run unit tests with detailed output
        run: |
          echo "=== Starting tests with detailed logging ==="
          mvn test -Dspring.profiles.active=test \
                   -Dlogging.level.ch.clip.trips=DEBUG \
                   -Dspring.jpa.show-sql=true \
                   -X || {
            echo "=== TEST FAILURE DETAILS ==="
            echo "Listing surefire reports..."
            find target/surefire-reports -name "*.txt" -exec echo "=== {} ===" \; -exec cat {} \;
            echo "=== Listing XML reports ==="
            find target/surefire-reports -name "*.xml" -exec echo "=== {} ===" \; -exec cat {} \;
            echo "=== END TEST FAILURE DETAILS ==="
            exit 1
          }

      - name: Build Docker image with cache
        run: |
          docker build --cache-from biztrips-app:latest \
            -t biztrips-app:latest \
            -t biztrips-app:${{ github.sha }} .

      - name: Start application (faster startup)
        run: |
          docker-compose up -d app
          echo "Waiting for application to start..."
          timeout 30 bash -c 'until wget --quiet --tries=1 --spider http://localhost:8083/actuator/health 2>/dev/null; do sleep 1; done'

      - name: Run Cypress tests (optimized)
        run: |
          docker-compose up --exit-code-from cypress cypress
        timeout-minutes: 5

      - name: Upload Cypress artifacts (on failure only)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-artifacts-${{ github.run_number }}
          path: |
            cypress/screenshots/
            cypress/videos/
          retention-days: 3
          if-no-files-found: ignore

      - name: Stop application
        if: always()
        run: docker-compose down --timeout 10

      - name: Cleanup Docker (faster)
        if: always()
        run: |
          docker image prune -f
          docker container prune -f

  build-and-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.ref == 'refs/heads/main'
    # Run in parallel with tests, not after
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build production image (cached)
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: biztrips-app:production
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Run fast security scan (critical only)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "biztrips-app:production"
          format: "table"
          severity: "CRITICAL"
          exit-code: "1"
          timeout: "3m"
        env:
          TRIVY_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-db
